-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_resource_ap_fixed_8_2_5_3_0_ap_fixed_8_2_5_3_0_config2_mult_s_w2_V_ROM_g8j is 
    generic(
             DataWidth     : integer := 5; 
             AddressWidth     : integer := 8; 
             AddressRange    : integer := 150
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);
 
          address1        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce1             : in std_logic; 
          q1              : out std_logic_vector(DataWidth-1 downto 0);
 
          address2        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce2             : in std_logic; 
          q2              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_resource_ap_fixed_8_2_5_3_0_ap_fixed_8_2_5_3_0_config2_mult_s_w2_V_ROM_g8j is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0);  
signal address1_tmp : std_logic_vector(AddressWidth-1 downto 0);  
signal address2_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "11111", 1 => "00011", 2 => "00000", 3 => "11010", 
    4 => "10110", 5 => "11011", 6 => "00001", 7 => "11000", 
    8 => "00111", 9 => "00100", 10 => "00100", 11 => "11101", 
    12 => "00000", 13 => "11010", 14 => "00001", 15 => "10101", 
    16 => "11100", 17 => "11101", 18 => "10101", 19 => "11011", 
    20 => "00100", 21 => "00011", 22 => "00000", 23 => "00100", 
    24 => "11010", 25 => "00011", 26 => "01011", 27 => "00001", 
    28 => "11010", 29 => "00010", 30 => "10110", 31 => "00010", 
    32 => "11110", 33 => "01000", 34 => "10111", 35 => "00011", 
    36 => "11100", 37 => "00110", 38 => "01100", 39 => "00110", 
    40 => "00011", 41 => "11011", 42 => "01100", 43 => "01100", 
    44 => "00011", 45 => "11100", 46 => "11011", 47 => "11111", 
    48 => "11100", 49 => "01100", 50 => "10111", 51 => "01100", 
    52 => "00000", 53 => "11100", 54 => "00001", 55 => "01010", 
    56 => "01010", 57 => "00011", 58 => "00000", 59 => "01100", 
    60 => "01101", 61 => "01001", 62 => "00011", 63 => "00010", 
    64 => "11111", 65 => "00001", 66 => "00011", 67 => "00100", 
    68 => "11100", 69 => "00101", 70 => "01001", 71 => "01001", 
    72 => "11101", 73 => "11111", 74 => "11100", 75 => "11011", 
    76 => "00100", 77 => "00101", 78 => "01000", 79 => "10110", 
    80 => "10110", 81 => "11001", 82 => "10101", 83 => "00111", 
    84 => "10110", 85 => "00100", 86 => "00100", 87 => "11011", 
    88 => "10110", 89 => "01010", 90 => "10110", 91 => "10111", 
    92 => "11100", 93 => "10111", 94 => "11010", 95 => "11100", 
    96 => "00110", 97 => "11000", 98 => "01001", 99 => "10110", 
    100 => "11011", 101 => "00010", 102 => "11111", 103 => "11000", 
    104 => "00101", 105 => "11010", 106 => "00001", 107 => "11010", 
    108 => "10101", 109 => "00100", 110 => "01000", 111 => "01001", 
    112 => "11110", 113 => "11000", 114 => "11011", 115 => "00010", 
    116 => "11011", 117 => "00100", 118 => "11100", 119 => "11001", 
    120 => "00110", 121 => "00110", 122 => "01001", 123 => "11010", 
    124 => "11011", 125 => "11000", 126 => "00111", 127 => "11010", 
    128 => "01000", 129 => "10111", 130 => "11001", 131 => "11010", 
    132 => "01000", 133 => "11100", 134 => "10110", 135 => "10110", 
    136 => "00111", 137 => "11100", 138 => "11100", 139 => "00111", 
    140 => "01011", 141 => "11101", 142 => "11110", 143 => "10101", 
    144 => "11001", 145 => "11110", 146 => "01000", 147 => "11101", 
    148 => "00100", 149 => "11010");

signal mem1 : mem_array := (
    0 => "11111", 1 => "00011", 2 => "00000", 3 => "11010", 
    4 => "10110", 5 => "11011", 6 => "00001", 7 => "11000", 
    8 => "00111", 9 => "00100", 10 => "00100", 11 => "11101", 
    12 => "00000", 13 => "11010", 14 => "00001", 15 => "10101", 
    16 => "11100", 17 => "11101", 18 => "10101", 19 => "11011", 
    20 => "00100", 21 => "00011", 22 => "00000", 23 => "00100", 
    24 => "11010", 25 => "00011", 26 => "01011", 27 => "00001", 
    28 => "11010", 29 => "00010", 30 => "10110", 31 => "00010", 
    32 => "11110", 33 => "01000", 34 => "10111", 35 => "00011", 
    36 => "11100", 37 => "00110", 38 => "01100", 39 => "00110", 
    40 => "00011", 41 => "11011", 42 => "01100", 43 => "01100", 
    44 => "00011", 45 => "11100", 46 => "11011", 47 => "11111", 
    48 => "11100", 49 => "01100", 50 => "10111", 51 => "01100", 
    52 => "00000", 53 => "11100", 54 => "00001", 55 => "01010", 
    56 => "01010", 57 => "00011", 58 => "00000", 59 => "01100", 
    60 => "01101", 61 => "01001", 62 => "00011", 63 => "00010", 
    64 => "11111", 65 => "00001", 66 => "00011", 67 => "00100", 
    68 => "11100", 69 => "00101", 70 => "01001", 71 => "01001", 
    72 => "11101", 73 => "11111", 74 => "11100", 75 => "11011", 
    76 => "00100", 77 => "00101", 78 => "01000", 79 => "10110", 
    80 => "10110", 81 => "11001", 82 => "10101", 83 => "00111", 
    84 => "10110", 85 => "00100", 86 => "00100", 87 => "11011", 
    88 => "10110", 89 => "01010", 90 => "10110", 91 => "10111", 
    92 => "11100", 93 => "10111", 94 => "11010", 95 => "11100", 
    96 => "00110", 97 => "11000", 98 => "01001", 99 => "10110", 
    100 => "11011", 101 => "00010", 102 => "11111", 103 => "11000", 
    104 => "00101", 105 => "11010", 106 => "00001", 107 => "11010", 
    108 => "10101", 109 => "00100", 110 => "01000", 111 => "01001", 
    112 => "11110", 113 => "11000", 114 => "11011", 115 => "00010", 
    116 => "11011", 117 => "00100", 118 => "11100", 119 => "11001", 
    120 => "00110", 121 => "00110", 122 => "01001", 123 => "11010", 
    124 => "11011", 125 => "11000", 126 => "00111", 127 => "11010", 
    128 => "01000", 129 => "10111", 130 => "11001", 131 => "11010", 
    132 => "01000", 133 => "11100", 134 => "10110", 135 => "10110", 
    136 => "00111", 137 => "11100", 138 => "11100", 139 => "00111", 
    140 => "01011", 141 => "11101", 142 => "11110", 143 => "10101", 
    144 => "11001", 145 => "11110", 146 => "01000", 147 => "11101", 
    148 => "00100", 149 => "11010");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;
 
memory_access_guard_1: process (address1) 
begin
      address1_tmp <= address1;
--synthesis translate_off
      if (CONV_INTEGER(address1) > AddressRange-1) then
           address1_tmp <= (others => '0');
      else 
           address1_tmp <= address1;
      end if;
--synthesis translate_on
end process;
 
memory_access_guard_2: process (address2) 
begin
      address2_tmp <= address2;
--synthesis translate_off
      if (CONV_INTEGER(address2) > AddressRange-1) then
           address2_tmp <= (others => '0');
      else 
           address2_tmp <= address2;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;
 
        if (ce1 = '1') then  
            q1 <= mem0(CONV_INTEGER(address1_tmp)); 
        end if;
 
        if (ce2 = '1') then  
            q2 <= mem1(CONV_INTEGER(address2_tmp)); 
        end if;

end if;
end process;

end rtl;

