-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_relu_array_ap_fixed_16u_array_ap_ufixed_8_2_4_0_0_16u_relu_config8_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer6_out_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    layer6_out_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
    layer6_out_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
    layer6_out_empty_n : IN STD_LOGIC;
    layer6_out_read : OUT STD_LOGIC;
    layer8_out_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    layer8_out_num_data_valid : IN STD_LOGIC_VECTOR (6 downto 0);
    layer8_out_fifo_cap : IN STD_LOGIC_VECTOR (6 downto 0);
    layer8_out_full_n : IN STD_LOGIC;
    layer8_out_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC );
end;


architecture behav of myproject_relu_array_ap_fixed_16u_array_ap_ufixed_8_2_4_0_0_16u_relu_config8_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv6_0 : STD_LOGIC_VECTOR (5 downto 0) := "000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv6_31 : STD_LOGIC_VECTOR (5 downto 0) := "110001";
    constant ap_const_lv6_1 : STD_LOGIC_VECTOR (5 downto 0) := "000001";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln41_fu_161_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal layer6_out_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal layer8_out_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal out_data_data_fu_492_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_reg_806 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_41_fu_506_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_41_reg_811 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_42_fu_520_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_42_reg_816 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_44_fu_534_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_44_reg_821 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_45_fu_548_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_45_reg_826 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_47_fu_562_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_47_reg_831 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_48_fu_576_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_48_reg_836 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_50_fu_590_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_50_reg_841 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln51_fu_604_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln51_reg_846 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_183_fu_618_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_183_reg_851 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln51_150_fu_632_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln51_150_reg_856 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_184_fu_646_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_184_reg_861 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln51_152_fu_660_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln51_152_reg_866 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_185_fu_674_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_185_reg_871 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln51_154_fu_688_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln51_154_reg_876 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_186_fu_702_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_186_reg_881 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_fu_136 : STD_LOGIC_VECTOR (5 downto 0);
    signal i_4_fu_167_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_3 : STD_LOGIC_VECTOR (5 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal out_data_data_51_fu_178_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_fu_486_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln45_fu_182_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal in_data_data_fu_206_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_154_fu_500_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_s_fu_216_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_52_fu_226_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_155_fu_514_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln45_9_fu_236_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal in_data_data_34_fu_246_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_156_fu_528_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_74_fu_256_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_53_fu_266_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_157_fu_542_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln45_s_fu_276_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal in_data_data_35_fu_286_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_158_fu_556_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_75_fu_296_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_54_fu_306_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_159_fu_570_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln45_1_fu_316_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal in_data_data_36_fu_326_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_160_fu_584_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_76_fu_336_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_s_fu_346_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_161_fu_598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_fu_356_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_131_fu_366_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_162_fu_612_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_77_fu_376_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_126_fu_386_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_163_fu_626_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln810_s_fu_396_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_127_fu_406_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_164_fu_640_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_78_fu_416_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_128_fu_426_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_165_fu_654_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln810_64_fu_436_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_129_fu_446_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_166_fu_668_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_79_fu_456_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_178_fu_186_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_167_fu_682_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln810_65_fu_466_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_130_fu_196_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_168_fu_696_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln3_fu_476_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1649_76_fu_752_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln51_78_fu_749_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1649_75_fu_746_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln51_77_fu_743_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1649_74_fu_740_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln51_76_fu_737_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1649_fu_734_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln51_75_fu_731_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln45_5_fu_728_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln51_74_fu_725_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln45_4_fu_722_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln51_73_fu_719_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln45_3_fu_716_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln51_fu_713_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln45_fu_710_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln57_s_fu_755_p17 : STD_LOGIC_VECTOR (126 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_142 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component myproject_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_136_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_142)) then
                if ((icmp_ln41_fu_161_p2 = ap_const_lv1_0)) then 
                    i_fu_136 <= i_4_fu_167_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_136 <= ap_const_lv6_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                out_data_data_41_reg_811 <= out_data_data_41_fu_506_p3;
                out_data_data_42_reg_816 <= out_data_data_42_fu_520_p3;
                out_data_data_44_reg_821 <= out_data_data_44_fu_534_p3;
                out_data_data_45_reg_826 <= out_data_data_45_fu_548_p3;
                out_data_data_47_reg_831 <= out_data_data_47_fu_562_p3;
                out_data_data_48_reg_836 <= out_data_data_48_fu_576_p3;
                out_data_data_50_reg_841 <= out_data_data_50_fu_590_p3;
                out_data_data_reg_806 <= out_data_data_fu_492_p3;
                p_Val2_183_reg_851 <= p_Val2_183_fu_618_p3;
                p_Val2_184_reg_861 <= p_Val2_184_fu_646_p3;
                p_Val2_185_reg_871 <= p_Val2_185_fu_674_p3;
                p_Val2_186_reg_881 <= p_Val2_186_fu_702_p3;
                select_ln51_150_reg_856 <= select_ln51_150_fu_632_p3;
                select_ln51_152_reg_866 <= select_ln51_152_fu_660_p3;
                select_ln51_154_reg_876 <= select_ln51_154_fu_688_p3;
                select_ln51_reg_846 <= select_ln51_fu_604_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, layer6_out_empty_n, layer8_out_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((layer8_out_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((layer6_out_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, layer6_out_empty_n, layer8_out_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((layer8_out_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((layer6_out_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, layer6_out_empty_n, layer8_out_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((layer8_out_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((layer6_out_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(layer6_out_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (layer6_out_empty_n = ap_const_logic_0);
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(layer8_out_full_n)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (layer8_out_full_n = ap_const_logic_0);
    end process;


    ap_condition_142_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_142 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln41_fu_161_p2, ap_start_int)
    begin
        if (((icmp_ln41_fu_161_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_3_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_136, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_3 <= ap_const_lv6_0;
        else 
            ap_sig_allocacmp_i_3 <= i_fu_136;
        end if; 
    end process;

    i_4_fu_167_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_3) + unsigned(ap_const_lv6_1));
    icmp_ln1649_154_fu_500_p2 <= "1" when (signed(in_data_data_fu_206_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_155_fu_514_p2 <= "1" when (signed(out_data_data_52_fu_226_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_156_fu_528_p2 <= "1" when (signed(in_data_data_34_fu_246_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_157_fu_542_p2 <= "1" when (signed(out_data_data_53_fu_266_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_158_fu_556_p2 <= "1" when (signed(in_data_data_35_fu_286_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_159_fu_570_p2 <= "1" when (signed(out_data_data_54_fu_306_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_160_fu_584_p2 <= "1" when (signed(in_data_data_36_fu_326_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_161_fu_598_p2 <= "1" when (signed(p_Val2_s_fu_346_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_162_fu_612_p2 <= "1" when (signed(p_Val2_131_fu_366_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_163_fu_626_p2 <= "1" when (signed(p_Val2_126_fu_386_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_164_fu_640_p2 <= "1" when (signed(p_Val2_127_fu_406_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_165_fu_654_p2 <= "1" when (signed(p_Val2_128_fu_426_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_166_fu_668_p2 <= "1" when (signed(p_Val2_129_fu_446_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_167_fu_682_p2 <= "1" when (signed(p_Val2_178_fu_186_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_168_fu_696_p2 <= "1" when (signed(p_Val2_130_fu_196_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_fu_486_p2 <= "1" when (signed(out_data_data_51_fu_178_p1) > signed(ap_const_lv8_0)) else "0";
    icmp_ln41_fu_161_p2 <= "1" when (ap_sig_allocacmp_i_3 = ap_const_lv6_31) else "0";
    in_data_data_34_fu_246_p4 <= layer6_out_dout(31 downto 24);
    in_data_data_35_fu_286_p4 <= layer6_out_dout(47 downto 40);
    in_data_data_36_fu_326_p4 <= layer6_out_dout(63 downto 56);
    in_data_data_fu_206_p4 <= layer6_out_dout(15 downto 8);

    layer6_out_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, layer6_out_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer6_out_blk_n <= layer6_out_empty_n;
        else 
            layer6_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer6_out_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer6_out_read <= ap_const_logic_1;
        else 
            layer6_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer8_out_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, layer8_out_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer8_out_blk_n <= layer8_out_full_n;
        else 
            layer8_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer8_out_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln57_s_fu_755_p17),128));

    layer8_out_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer8_out_write <= ap_const_logic_1;
        else 
            layer8_out_write <= ap_const_logic_0;
        end if; 
    end process;

    or_ln57_s_fu_755_p17 <= (((((((((((((((p_Val2_186_reg_881 & zext_ln1649_76_fu_752_p1) & zext_ln51_78_fu_749_p1) & zext_ln1649_75_fu_746_p1) & zext_ln51_77_fu_743_p1) & zext_ln1649_74_fu_740_p1) & zext_ln51_76_fu_737_p1) & zext_ln1649_fu_734_p1) & zext_ln51_75_fu_731_p1) & zext_ln45_5_fu_728_p1) & zext_ln51_74_fu_725_p1) & zext_ln45_4_fu_722_p1) & zext_ln51_73_fu_719_p1) & zext_ln45_3_fu_716_p1) & zext_ln51_fu_713_p1) & zext_ln45_fu_710_p1);
    out_data_data_41_fu_506_p3 <= 
        trunc_ln44_s_fu_216_p4 when (icmp_ln1649_154_fu_500_p2(0) = '1') else 
        ap_const_lv7_0;
    out_data_data_42_fu_520_p3 <= 
        trunc_ln45_9_fu_236_p4 when (icmp_ln1649_155_fu_514_p2(0) = '1') else 
        ap_const_lv7_0;
    out_data_data_44_fu_534_p3 <= 
        trunc_ln44_74_fu_256_p4 when (icmp_ln1649_156_fu_528_p2(0) = '1') else 
        ap_const_lv7_0;
    out_data_data_45_fu_548_p3 <= 
        trunc_ln45_s_fu_276_p4 when (icmp_ln1649_157_fu_542_p2(0) = '1') else 
        ap_const_lv7_0;
    out_data_data_47_fu_562_p3 <= 
        trunc_ln44_75_fu_296_p4 when (icmp_ln1649_158_fu_556_p2(0) = '1') else 
        ap_const_lv7_0;
    out_data_data_48_fu_576_p3 <= 
        trunc_ln45_1_fu_316_p4 when (icmp_ln1649_159_fu_570_p2(0) = '1') else 
        ap_const_lv7_0;
    out_data_data_50_fu_590_p3 <= 
        trunc_ln44_76_fu_336_p4 when (icmp_ln1649_160_fu_584_p2(0) = '1') else 
        ap_const_lv7_0;
    out_data_data_51_fu_178_p1 <= layer6_out_dout(8 - 1 downto 0);
    out_data_data_52_fu_226_p4 <= layer6_out_dout(23 downto 16);
    out_data_data_53_fu_266_p4 <= layer6_out_dout(39 downto 32);
    out_data_data_54_fu_306_p4 <= layer6_out_dout(55 downto 48);
    out_data_data_fu_492_p3 <= 
        trunc_ln45_fu_182_p1 when (icmp_ln1649_fu_486_p2(0) = '1') else 
        ap_const_lv7_0;
    p_Val2_126_fu_386_p4 <= layer6_out_dout(87 downto 80);
    p_Val2_127_fu_406_p4 <= layer6_out_dout(95 downto 88);
    p_Val2_128_fu_426_p4 <= layer6_out_dout(103 downto 96);
    p_Val2_129_fu_446_p4 <= layer6_out_dout(111 downto 104);
    p_Val2_130_fu_196_p4 <= layer6_out_dout(127 downto 120);
    p_Val2_131_fu_366_p4 <= layer6_out_dout(79 downto 72);
    p_Val2_178_fu_186_p4 <= layer6_out_dout(119 downto 112);
    p_Val2_183_fu_618_p3 <= 
        trunc_ln44_77_fu_376_p4 when (icmp_ln1649_162_fu_612_p2(0) = '1') else 
        ap_const_lv7_0;
    p_Val2_184_fu_646_p3 <= 
        trunc_ln44_78_fu_416_p4 when (icmp_ln1649_164_fu_640_p2(0) = '1') else 
        ap_const_lv7_0;
    p_Val2_185_fu_674_p3 <= 
        trunc_ln44_79_fu_456_p4 when (icmp_ln1649_166_fu_668_p2(0) = '1') else 
        ap_const_lv7_0;
    p_Val2_186_fu_702_p3 <= 
        trunc_ln3_fu_476_p4 when (icmp_ln1649_168_fu_696_p2(0) = '1') else 
        ap_const_lv7_0;
    p_Val2_s_fu_346_p4 <= layer6_out_dout(71 downto 64);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln51_150_fu_632_p3 <= 
        trunc_ln810_s_fu_396_p4 when (icmp_ln1649_163_fu_626_p2(0) = '1') else 
        ap_const_lv7_0;
    select_ln51_152_fu_660_p3 <= 
        trunc_ln810_64_fu_436_p4 when (icmp_ln1649_165_fu_654_p2(0) = '1') else 
        ap_const_lv7_0;
    select_ln51_154_fu_688_p3 <= 
        trunc_ln810_65_fu_466_p4 when (icmp_ln1649_167_fu_682_p2(0) = '1') else 
        ap_const_lv7_0;
    select_ln51_fu_604_p3 <= 
        trunc_ln_fu_356_p4 when (icmp_ln1649_161_fu_598_p2(0) = '1') else 
        ap_const_lv7_0;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln3_fu_476_p4 <= layer6_out_dout(126 downto 120);
    trunc_ln44_74_fu_256_p4 <= layer6_out_dout(30 downto 24);
    trunc_ln44_75_fu_296_p4 <= layer6_out_dout(46 downto 40);
    trunc_ln44_76_fu_336_p4 <= layer6_out_dout(62 downto 56);
    trunc_ln44_77_fu_376_p4 <= layer6_out_dout(78 downto 72);
    trunc_ln44_78_fu_416_p4 <= layer6_out_dout(94 downto 88);
    trunc_ln44_79_fu_456_p4 <= layer6_out_dout(110 downto 104);
    trunc_ln44_s_fu_216_p4 <= layer6_out_dout(14 downto 8);
    trunc_ln45_1_fu_316_p4 <= layer6_out_dout(54 downto 48);
    trunc_ln45_9_fu_236_p4 <= layer6_out_dout(22 downto 16);
    trunc_ln45_fu_182_p1 <= layer6_out_dout(7 - 1 downto 0);
    trunc_ln45_s_fu_276_p4 <= layer6_out_dout(38 downto 32);
    trunc_ln810_64_fu_436_p4 <= layer6_out_dout(102 downto 96);
    trunc_ln810_65_fu_466_p4 <= layer6_out_dout(118 downto 112);
    trunc_ln810_s_fu_396_p4 <= layer6_out_dout(86 downto 80);
    trunc_ln_fu_356_p4 <= layer6_out_dout(70 downto 64);
    zext_ln1649_74_fu_740_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_150_reg_856),8));
    zext_ln1649_75_fu_746_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_152_reg_866),8));
    zext_ln1649_76_fu_752_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_154_reg_876),8));
    zext_ln1649_fu_734_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_reg_846),8));
    zext_ln45_3_fu_716_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_data_42_reg_816),8));
    zext_ln45_4_fu_722_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_data_45_reg_826),8));
    zext_ln45_5_fu_728_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_data_48_reg_836),8));
    zext_ln45_fu_710_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_data_reg_806),8));
    zext_ln51_73_fu_719_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_data_44_reg_821),8));
    zext_ln51_74_fu_725_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_data_47_reg_831),8));
    zext_ln51_75_fu_731_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_data_50_reg_841),8));
    zext_ln51_76_fu_737_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_183_reg_851),8));
    zext_ln51_77_fu_743_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_184_reg_861),8));
    zext_ln51_78_fu_749_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_185_reg_871),8));
    zext_ln51_fu_713_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_data_41_reg_811),8));
end behav;
