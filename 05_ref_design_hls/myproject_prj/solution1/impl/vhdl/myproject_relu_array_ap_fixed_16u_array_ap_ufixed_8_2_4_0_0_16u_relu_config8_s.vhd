-- ==============================================================
-- RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity myproject_relu_array_ap_fixed_16u_array_ap_ufixed_8_2_4_0_0_16u_relu_config8_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    start_full_n : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_continue : IN STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    layer6_out_dout : IN STD_LOGIC_VECTOR (127 downto 0);
    layer6_out_num_data_valid : IN STD_LOGIC_VECTOR (7 downto 0);
    layer6_out_fifo_cap : IN STD_LOGIC_VECTOR (7 downto 0);
    layer6_out_empty_n : IN STD_LOGIC;
    layer6_out_read : OUT STD_LOGIC;
    layer8_out_din : OUT STD_LOGIC_VECTOR (127 downto 0);
    layer8_out_num_data_valid : IN STD_LOGIC_VECTOR (7 downto 0);
    layer8_out_fifo_cap : IN STD_LOGIC_VECTOR (7 downto 0);
    layer8_out_full_n : IN STD_LOGIC;
    layer8_out_write : OUT STD_LOGIC;
    start_out : OUT STD_LOGIC;
    start_write : OUT STD_LOGIC );
end;


architecture behav of myproject_relu_array_ap_fixed_16u_array_ap_ufixed_8_2_4_0_0_16u_relu_config8_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv7_51 : STD_LOGIC_VECTOR (6 downto 0) := "1010001";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv8_0 : STD_LOGIC_VECTOR (7 downto 0) := "00000000";

attribute shreg_extract : string;
    signal real_start : STD_LOGIC;
    signal start_once_reg : STD_LOGIC := '0';
    signal ap_CS_fsm : STD_LOGIC_VECTOR (0 downto 0) := "1";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_idle_pp0 : STD_LOGIC;
    signal internal_ap_ready : STD_LOGIC;
    signal ap_done_reg : STD_LOGIC := '0';
    signal ap_block_state1_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state2_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal icmp_ln41_fu_159_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_condition_exit_pp0_iter0_stage0 : STD_LOGIC;
    signal ap_loop_exit_ready : STD_LOGIC;
    signal ap_ready_int : STD_LOGIC;
    signal layer6_out_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal layer8_out_blk_n : STD_LOGIC;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal out_data_data_fu_490_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_reg_804 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_54_fu_504_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_54_reg_809 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_55_fu_518_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_55_reg_814 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_57_fu_532_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_57_reg_819 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_58_fu_546_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_58_reg_824 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_60_fu_560_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_60_reg_829 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_61_fu_574_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_61_reg_834 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_63_fu_588_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_63_reg_839 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln51_fu_602_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln51_reg_844 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_74_fu_616_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_74_reg_849 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln51_56_fu_630_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln51_56_reg_854 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_75_fu_644_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_75_reg_859 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln51_58_fu_658_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln51_58_reg_864 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_76_fu_672_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_76_reg_869 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln51_60_fu_686_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal select_ln51_60_reg_874 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_77_fu_700_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_77_reg_879 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_fu_134 : STD_LOGIC_VECTOR (6 downto 0);
    signal i_6_fu_165_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_loop_init : STD_LOGIC;
    signal ap_sig_allocacmp_i_5 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_block_pp0_stage0_01001 : BOOLEAN;
    signal out_data_data_64_fu_176_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_fu_484_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln45_fu_180_p1 : STD_LOGIC_VECTOR (6 downto 0);
    signal in_data_data_fu_204_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_70_fu_498_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_s_fu_214_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_65_fu_224_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_71_fu_512_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln45_s_fu_234_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal in_data_data_38_fu_244_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_72_fu_526_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_29_fu_254_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_66_fu_264_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_73_fu_540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln45_1_fu_274_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal in_data_data_39_fu_284_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_74_fu_554_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_30_fu_294_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal out_data_data_67_fu_304_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_75_fu_568_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln45_2_fu_314_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal in_data_data_40_fu_324_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_76_fu_582_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_31_fu_334_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_s_fu_344_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_77_fu_596_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln_fu_354_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_45_fu_364_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_78_fu_610_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_32_fu_374_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_40_fu_384_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_79_fu_624_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln810_s_fu_394_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_41_fu_404_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_80_fu_638_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_33_fu_414_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_42_fu_424_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_81_fu_652_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln810_21_fu_434_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_43_fu_444_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_82_fu_666_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln44_34_fu_454_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_69_fu_184_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_83_fu_680_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln810_22_fu_464_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_Val2_44_fu_194_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln1649_84_fu_694_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln3_fu_474_p4 : STD_LOGIC_VECTOR (6 downto 0);
    signal zext_ln1649_29_fu_750_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln51_36_fu_747_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1649_28_fu_744_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln51_35_fu_741_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1649_27_fu_738_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln51_34_fu_735_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln1649_fu_732_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln51_33_fu_729_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln45_9_fu_726_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln51_32_fu_723_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln45_8_fu_720_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln51_31_fu_717_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln45_7_fu_714_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln51_fu_711_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln45_fu_708_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal or_ln57_s_fu_753_p17 : STD_LOGIC_VECTOR (126 downto 0);
    signal ap_continue_int : STD_LOGIC;
    signal ap_done_int : STD_LOGIC;
    signal ap_loop_exit_ready_pp0_iter1_reg : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_start_int : STD_LOGIC;
    signal ap_condition_142 : BOOLEAN;
    signal ap_ce_reg : STD_LOGIC;

    component myproject_flow_control_loop_pipe IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_start_int : OUT STD_LOGIC;
        ap_loop_init : OUT STD_LOGIC;
        ap_ready_int : IN STD_LOGIC;
        ap_loop_exit_ready : IN STD_LOGIC;
        ap_loop_exit_done : IN STD_LOGIC;
        ap_continue_int : OUT STD_LOGIC;
        ap_done_int : IN STD_LOGIC;
        ap_continue : IN STD_LOGIC );
    end component;



begin
    flow_control_loop_pipe_U : component myproject_flow_control_loop_pipe
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => real_start,
        ap_ready => internal_ap_ready,
        ap_done => ap_done,
        ap_start_int => ap_start_int,
        ap_loop_init => ap_loop_init,
        ap_ready_int => ap_ready_int,
        ap_loop_exit_ready => ap_condition_exit_pp0_iter0_stage0,
        ap_loop_exit_done => ap_done_int,
        ap_continue_int => ap_continue_int,
        ap_done_int => ap_done_int,
        ap_continue => ap_continue);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_done_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_done_reg <= ap_const_logic_0;
            else
                if ((ap_continue_int = ap_const_logic_1)) then 
                    ap_done_reg <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_done_reg <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = ap_condition_exit_pp0_iter0_stage0)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter1 <= ap_start_int;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    start_once_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                start_once_reg <= ap_const_logic_0;
            else
                if (((real_start = ap_const_logic_1) and (internal_ap_ready = ap_const_logic_0))) then 
                    start_once_reg <= ap_const_logic_1;
                elsif ((internal_ap_ready = ap_const_logic_1)) then 
                    start_once_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_fu_134_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_142)) then
                if ((icmp_ln41_fu_159_p2 = ap_const_lv1_0)) then 
                    i_fu_134 <= i_6_fu_165_p2;
                elsif ((ap_loop_init = ap_const_logic_1)) then 
                    i_fu_134 <= ap_const_lv7_0;
                end if;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
                out_data_data_54_reg_809 <= out_data_data_54_fu_504_p3;
                out_data_data_55_reg_814 <= out_data_data_55_fu_518_p3;
                out_data_data_57_reg_819 <= out_data_data_57_fu_532_p3;
                out_data_data_58_reg_824 <= out_data_data_58_fu_546_p3;
                out_data_data_60_reg_829 <= out_data_data_60_fu_560_p3;
                out_data_data_61_reg_834 <= out_data_data_61_fu_574_p3;
                out_data_data_63_reg_839 <= out_data_data_63_fu_588_p3;
                out_data_data_reg_804 <= out_data_data_fu_490_p3;
                p_Val2_74_reg_849 <= p_Val2_74_fu_616_p3;
                p_Val2_75_reg_859 <= p_Val2_75_fu_644_p3;
                p_Val2_76_reg_869 <= p_Val2_76_fu_672_p3;
                p_Val2_77_reg_879 <= p_Val2_77_fu_700_p3;
                select_ln51_56_reg_854 <= select_ln51_56_fu_630_p3;
                select_ln51_58_reg_864 <= select_ln51_58_fu_658_p3;
                select_ln51_60_reg_874 <= select_ln51_60_fu_686_p3;
                select_ln51_reg_844 <= select_ln51_fu_602_p3;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_CS_fsm)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_pp0_stage0 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when others =>  
                ap_NS_fsm <= "X";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(0);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_pp0_stage0_01001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, layer6_out_empty_n, layer8_out_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_01001 <= ((ap_done_reg = ap_const_logic_1) or ((layer8_out_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((layer6_out_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_11001_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, layer6_out_empty_n, layer8_out_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_11001 <= ((ap_done_reg = ap_const_logic_1) or ((layer8_out_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((layer6_out_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_pp0_stage0_subdone_assign_proc : process(ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_done_reg, layer6_out_empty_n, layer8_out_full_n, ap_start_int)
    begin
                ap_block_pp0_stage0_subdone <= ((ap_done_reg = ap_const_logic_1) or ((layer8_out_full_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1)) or ((layer6_out_empty_n = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1)) or ((ap_done_reg = ap_const_logic_1) and (ap_start_int = ap_const_logic_1)));
    end process;


    ap_block_state1_pp0_stage0_iter0_assign_proc : process(ap_done_reg)
    begin
                ap_block_state1_pp0_stage0_iter0 <= (ap_done_reg = ap_const_logic_1);
    end process;


    ap_block_state2_pp0_stage0_iter1_assign_proc : process(layer6_out_empty_n)
    begin
                ap_block_state2_pp0_stage0_iter1 <= (layer6_out_empty_n = ap_const_logic_0);
    end process;


    ap_block_state3_pp0_stage0_iter2_assign_proc : process(layer8_out_full_n)
    begin
                ap_block_state3_pp0_stage0_iter2 <= (layer8_out_full_n = ap_const_logic_0);
    end process;


    ap_condition_142_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_start_int)
    begin
                ap_condition_142 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_exit_pp0_iter0_stage0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, icmp_ln41_fu_159_p2, ap_start_int)
    begin
        if (((icmp_ln41_fu_159_p2 = ap_const_lv1_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_1;
        else 
            ap_condition_exit_pp0_iter0_stage0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_done_reg, ap_block_pp0_stage0_subdone, ap_loop_exit_ready_pp0_iter1_reg)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_loop_exit_ready_pp0_iter1_reg = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_done_int <= ap_const_logic_1;
        else 
            ap_done_int <= ap_done_reg;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_reg_pp0_iter0 <= ap_start_int;

    ap_idle_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_idle_pp0, ap_start_int)
    begin
        if (((ap_start_int = ap_const_logic_0) and (ap_idle_pp0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2)
    begin
        if (((ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_loop_exit_ready <= ap_condition_exit_pp0_iter0_stage0;
    ap_ready <= internal_ap_ready;

    ap_ready_int_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_subdone, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            ap_ready_int <= ap_const_logic_1;
        else 
            ap_ready_int <= ap_const_logic_0;
        end if; 
    end process;


    ap_sig_allocacmp_i_5_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0, i_fu_134, ap_loop_init, ap_start_int)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_start_int = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_loop_init = ap_const_logic_1))) then 
            ap_sig_allocacmp_i_5 <= ap_const_lv7_0;
        else 
            ap_sig_allocacmp_i_5 <= i_fu_134;
        end if; 
    end process;

    i_6_fu_165_p2 <= std_logic_vector(unsigned(ap_sig_allocacmp_i_5) + unsigned(ap_const_lv7_1));
    icmp_ln1649_70_fu_498_p2 <= "1" when (signed(in_data_data_fu_204_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_71_fu_512_p2 <= "1" when (signed(out_data_data_65_fu_224_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_72_fu_526_p2 <= "1" when (signed(in_data_data_38_fu_244_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_73_fu_540_p2 <= "1" when (signed(out_data_data_66_fu_264_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_74_fu_554_p2 <= "1" when (signed(in_data_data_39_fu_284_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_75_fu_568_p2 <= "1" when (signed(out_data_data_67_fu_304_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_76_fu_582_p2 <= "1" when (signed(in_data_data_40_fu_324_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_77_fu_596_p2 <= "1" when (signed(p_Val2_s_fu_344_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_78_fu_610_p2 <= "1" when (signed(p_Val2_45_fu_364_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_79_fu_624_p2 <= "1" when (signed(p_Val2_40_fu_384_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_80_fu_638_p2 <= "1" when (signed(p_Val2_41_fu_404_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_81_fu_652_p2 <= "1" when (signed(p_Val2_42_fu_424_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_82_fu_666_p2 <= "1" when (signed(p_Val2_43_fu_444_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_83_fu_680_p2 <= "1" when (signed(p_Val2_69_fu_184_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_84_fu_694_p2 <= "1" when (signed(p_Val2_44_fu_194_p4) > signed(ap_const_lv8_0)) else "0";
    icmp_ln1649_fu_484_p2 <= "1" when (signed(out_data_data_64_fu_176_p1) > signed(ap_const_lv8_0)) else "0";
    icmp_ln41_fu_159_p2 <= "1" when (ap_sig_allocacmp_i_5 = ap_const_lv7_51) else "0";
    in_data_data_38_fu_244_p4 <= layer6_out_dout(31 downto 24);
    in_data_data_39_fu_284_p4 <= layer6_out_dout(47 downto 40);
    in_data_data_40_fu_324_p4 <= layer6_out_dout(63 downto 56);
    in_data_data_fu_204_p4 <= layer6_out_dout(15 downto 8);

    layer6_out_blk_n_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, layer6_out_empty_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer6_out_blk_n <= layer6_out_empty_n;
        else 
            layer6_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;


    layer6_out_read_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            layer6_out_read <= ap_const_logic_1;
        else 
            layer6_out_read <= ap_const_logic_0;
        end if; 
    end process;


    layer8_out_blk_n_assign_proc : process(ap_enable_reg_pp0_iter2, layer8_out_full_n, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer8_out_blk_n <= layer8_out_full_n;
        else 
            layer8_out_blk_n <= ap_const_logic_1;
        end if; 
    end process;

    layer8_out_din <= std_logic_vector(IEEE.numeric_std.resize(unsigned(or_ln57_s_fu_753_p17),128));

    layer8_out_write_assign_proc : process(ap_enable_reg_pp0_iter2, ap_block_pp0_stage0_11001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter2 = ap_const_logic_1))) then 
            layer8_out_write <= ap_const_logic_1;
        else 
            layer8_out_write <= ap_const_logic_0;
        end if; 
    end process;

    or_ln57_s_fu_753_p17 <= (((((((((((((((p_Val2_77_reg_879 & zext_ln1649_29_fu_750_p1) & zext_ln51_36_fu_747_p1) & zext_ln1649_28_fu_744_p1) & zext_ln51_35_fu_741_p1) & zext_ln1649_27_fu_738_p1) & zext_ln51_34_fu_735_p1) & zext_ln1649_fu_732_p1) & zext_ln51_33_fu_729_p1) & zext_ln45_9_fu_726_p1) & zext_ln51_32_fu_723_p1) & zext_ln45_8_fu_720_p1) & zext_ln51_31_fu_717_p1) & zext_ln45_7_fu_714_p1) & zext_ln51_fu_711_p1) & zext_ln45_fu_708_p1);
    out_data_data_54_fu_504_p3 <= 
        trunc_ln44_s_fu_214_p4 when (icmp_ln1649_70_fu_498_p2(0) = '1') else 
        ap_const_lv7_0;
    out_data_data_55_fu_518_p3 <= 
        trunc_ln45_s_fu_234_p4 when (icmp_ln1649_71_fu_512_p2(0) = '1') else 
        ap_const_lv7_0;
    out_data_data_57_fu_532_p3 <= 
        trunc_ln44_29_fu_254_p4 when (icmp_ln1649_72_fu_526_p2(0) = '1') else 
        ap_const_lv7_0;
    out_data_data_58_fu_546_p3 <= 
        trunc_ln45_1_fu_274_p4 when (icmp_ln1649_73_fu_540_p2(0) = '1') else 
        ap_const_lv7_0;
    out_data_data_60_fu_560_p3 <= 
        trunc_ln44_30_fu_294_p4 when (icmp_ln1649_74_fu_554_p2(0) = '1') else 
        ap_const_lv7_0;
    out_data_data_61_fu_574_p3 <= 
        trunc_ln45_2_fu_314_p4 when (icmp_ln1649_75_fu_568_p2(0) = '1') else 
        ap_const_lv7_0;
    out_data_data_63_fu_588_p3 <= 
        trunc_ln44_31_fu_334_p4 when (icmp_ln1649_76_fu_582_p2(0) = '1') else 
        ap_const_lv7_0;
    out_data_data_64_fu_176_p1 <= layer6_out_dout(8 - 1 downto 0);
    out_data_data_65_fu_224_p4 <= layer6_out_dout(23 downto 16);
    out_data_data_66_fu_264_p4 <= layer6_out_dout(39 downto 32);
    out_data_data_67_fu_304_p4 <= layer6_out_dout(55 downto 48);
    out_data_data_fu_490_p3 <= 
        trunc_ln45_fu_180_p1 when (icmp_ln1649_fu_484_p2(0) = '1') else 
        ap_const_lv7_0;
    p_Val2_40_fu_384_p4 <= layer6_out_dout(87 downto 80);
    p_Val2_41_fu_404_p4 <= layer6_out_dout(95 downto 88);
    p_Val2_42_fu_424_p4 <= layer6_out_dout(103 downto 96);
    p_Val2_43_fu_444_p4 <= layer6_out_dout(111 downto 104);
    p_Val2_44_fu_194_p4 <= layer6_out_dout(127 downto 120);
    p_Val2_45_fu_364_p4 <= layer6_out_dout(79 downto 72);
    p_Val2_69_fu_184_p4 <= layer6_out_dout(119 downto 112);
    p_Val2_74_fu_616_p3 <= 
        trunc_ln44_32_fu_374_p4 when (icmp_ln1649_78_fu_610_p2(0) = '1') else 
        ap_const_lv7_0;
    p_Val2_75_fu_644_p3 <= 
        trunc_ln44_33_fu_414_p4 when (icmp_ln1649_80_fu_638_p2(0) = '1') else 
        ap_const_lv7_0;
    p_Val2_76_fu_672_p3 <= 
        trunc_ln44_34_fu_454_p4 when (icmp_ln1649_82_fu_666_p2(0) = '1') else 
        ap_const_lv7_0;
    p_Val2_77_fu_700_p3 <= 
        trunc_ln3_fu_474_p4 when (icmp_ln1649_84_fu_694_p2(0) = '1') else 
        ap_const_lv7_0;
    p_Val2_s_fu_344_p4 <= layer6_out_dout(71 downto 64);

    real_start_assign_proc : process(ap_start, start_full_n, start_once_reg)
    begin
        if (((start_full_n = ap_const_logic_0) and (start_once_reg = ap_const_logic_0))) then 
            real_start <= ap_const_logic_0;
        else 
            real_start <= ap_start;
        end if; 
    end process;

    select_ln51_56_fu_630_p3 <= 
        trunc_ln810_s_fu_394_p4 when (icmp_ln1649_79_fu_624_p2(0) = '1') else 
        ap_const_lv7_0;
    select_ln51_58_fu_658_p3 <= 
        trunc_ln810_21_fu_434_p4 when (icmp_ln1649_81_fu_652_p2(0) = '1') else 
        ap_const_lv7_0;
    select_ln51_60_fu_686_p3 <= 
        trunc_ln810_22_fu_464_p4 when (icmp_ln1649_83_fu_680_p2(0) = '1') else 
        ap_const_lv7_0;
    select_ln51_fu_602_p3 <= 
        trunc_ln_fu_354_p4 when (icmp_ln1649_77_fu_596_p2(0) = '1') else 
        ap_const_lv7_0;
    start_out <= real_start;

    start_write_assign_proc : process(real_start, start_once_reg)
    begin
        if (((real_start = ap_const_logic_1) and (start_once_reg = ap_const_logic_0))) then 
            start_write <= ap_const_logic_1;
        else 
            start_write <= ap_const_logic_0;
        end if; 
    end process;

    trunc_ln3_fu_474_p4 <= layer6_out_dout(126 downto 120);
    trunc_ln44_29_fu_254_p4 <= layer6_out_dout(30 downto 24);
    trunc_ln44_30_fu_294_p4 <= layer6_out_dout(46 downto 40);
    trunc_ln44_31_fu_334_p4 <= layer6_out_dout(62 downto 56);
    trunc_ln44_32_fu_374_p4 <= layer6_out_dout(78 downto 72);
    trunc_ln44_33_fu_414_p4 <= layer6_out_dout(94 downto 88);
    trunc_ln44_34_fu_454_p4 <= layer6_out_dout(110 downto 104);
    trunc_ln44_s_fu_214_p4 <= layer6_out_dout(14 downto 8);
    trunc_ln45_1_fu_274_p4 <= layer6_out_dout(38 downto 32);
    trunc_ln45_2_fu_314_p4 <= layer6_out_dout(54 downto 48);
    trunc_ln45_fu_180_p1 <= layer6_out_dout(7 - 1 downto 0);
    trunc_ln45_s_fu_234_p4 <= layer6_out_dout(22 downto 16);
    trunc_ln810_21_fu_434_p4 <= layer6_out_dout(102 downto 96);
    trunc_ln810_22_fu_464_p4 <= layer6_out_dout(118 downto 112);
    trunc_ln810_s_fu_394_p4 <= layer6_out_dout(86 downto 80);
    trunc_ln_fu_354_p4 <= layer6_out_dout(70 downto 64);
    zext_ln1649_27_fu_738_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_56_reg_854),8));
    zext_ln1649_28_fu_744_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_58_reg_864),8));
    zext_ln1649_29_fu_750_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_60_reg_874),8));
    zext_ln1649_fu_732_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(select_ln51_reg_844),8));
    zext_ln45_7_fu_714_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_data_55_reg_814),8));
    zext_ln45_8_fu_720_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_data_58_reg_824),8));
    zext_ln45_9_fu_726_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_data_61_reg_834),8));
    zext_ln45_fu_708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_data_reg_804),8));
    zext_ln51_31_fu_717_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_data_57_reg_819),8));
    zext_ln51_32_fu_723_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_data_60_reg_829),8));
    zext_ln51_33_fu_729_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_data_63_reg_839),8));
    zext_ln51_34_fu_735_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_74_reg_849),8));
    zext_ln51_35_fu_741_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_75_reg_859),8));
    zext_ln51_36_fu_747_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_Val2_76_reg_869),8));
    zext_ln51_fu_711_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(out_data_data_54_reg_809),8));
end behav;
