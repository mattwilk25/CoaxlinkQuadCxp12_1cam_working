-- ==============================================================
-- Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
-- Version: 2022.2
-- Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
-- ==============================================================
library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity myproject_dense_array_ap_ufixed_32u_array_ap_fixed_8_2_5_3_0_5u_config18_s_w18_V_ROM_AUcgu is 
    generic(
             DataWidth     : integer := 6; 
             AddressWidth     : integer := 8; 
             AddressRange    : integer := 160
    ); 
    port (
 
          address0        : in std_logic_vector(AddressWidth-1 downto 0); 
          ce0             : in std_logic; 
          q0              : out std_logic_vector(DataWidth-1 downto 0);

          reset               : in std_logic;
          clk                 : in std_logic
    ); 
end entity; 


architecture rtl of myproject_dense_array_ap_ufixed_32u_array_ap_fixed_8_2_5_3_0_5u_config18_s_w18_V_ROM_AUcgu is 
 
signal address0_tmp : std_logic_vector(AddressWidth-1 downto 0); 

type mem_array is array (0 to AddressRange-1) of std_logic_vector (DataWidth-1 downto 0); 

signal mem0 : mem_array := (
    0 => "000000", 1 => "111110", 2 => "000101", 3 => "000000", 
    4 => "000110", 5 => "010000", 6 => "000110", 7 => "111110", 
    8 => "000001", 9 => "001110", 10 => "000011", 11 => "000110", 
    12 => "111111", 13 => "111111", 14 => "000010", 15 => "000100", 
    16 => "000001", 17 => "111100", 18 => "111000", 19 => "000100", 
    20 => "111110", 21 => "000111", 22 => "110011", 23 => "111110", 
    24 => "000010", 25 => "111010", 26 => "111000", 27 => "000000", 
    28 => "111111", 29 => "000101", 30 => "111111", 31 => "110111", 
    32 => "000000", 33 => "001110", 34 => "000010", 35 => "000001", 
    36 => "000011", 37 => "000011", 38 => "000010", 39 => "111111", 
    40 => "000000", 41 => "001000", 42 => "111111", 43 => "000011", 
    44 => "000010", 45 => "000001", 46 => "101111", 47 => "001001", 
    48 => "000000", 49 => "000000", 50 => "110101", 51 => "001001", 
    52 => "111011", 53 => "111111", 54 => "000000", 55 => "000001", 
    56 => "111100", 57 => "111011", 58 => "000011", 59 => "111110", 
    60 => "000001", 61 => "000000", 62 => "000010", 63 => "000001", 
    64 => "111001", 65 => "000001", 66 => "000010", 67 => "111100", 
    68 => "000010", 69 => "001000", 70 => "110111", 71 => "000000", 
    72 => "111100", 73 => "110100", 74 => "000001", 75 => "000011", 
    76 => "000000", 77 => "000101", 78 => "111101", 79 => "110101", 
    80 => "000010", 81 => "111000", 82 => "001010", 83 => "111110", 
    84 => "000010", 85 => "001000", 86 => "000111", 87 => "000001", 
    88 => "110111", 89 => "000011", 90 => "001010", 91 => "111111", 
    92 => "111111", 93 => "111001", 94 => "110111", 95 => "000100", 
    96 => "110111", 97 => "111010", 98 => "000000", 99 => "000001", 
    100 => "000010", 101 => "000001", 102 => "111001", 103 => "111111", 
    104 => "000011", 105 => "111000", 106 => "000010", 107 => "000000", 
    108 => "000000", 109 => "111110", 110 => "000001", 111 => "110110", 
    112 => "000001", 113 => "111110", 114 => "111110", 115 => "111111", 
    116 => "111110", 117 => "110110", 118 => "000011", 119 => "000001", 
    120 => "001000", 121 => "000100", 122 => "111101", 123 => "000011", 
    124 => "000001", 125 => "000001", 126 => "111101", 127 => "111111", 
    128 => "111110", 129 => "110000", 130 => "100011", 131 => "001001", 
    132 => "000001", 133 => "001011", 134 => "000010", 135 => "000000", 
    136 => "000101", 137 => "000101", 138 => "000001", 139 => "111110", 
    140 => "101101", 141 => "000011", 142 => "000110", 143 => "000100", 
    144 => "111101", 145 => "000011", 146 => "001011", 147 => "110111", 
    148 => "000000", 149 => "111111", 150 => "110101", 151 => "110100", 
    152 => "011110", 153 => "101010", 154 => "000000", 155 => "010000", 
    156 => "000101", 157 => "000110", 158 => "111010", 159 => "110111");



begin 

 
memory_access_guard_0: process (address0) 
begin
      address0_tmp <= address0;
--synthesis translate_off
      if (CONV_INTEGER(address0) > AddressRange-1) then
           address0_tmp <= (others => '0');
      else 
           address0_tmp <= address0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
 
        if (ce0 = '1') then  
            q0 <= mem0(CONV_INTEGER(address0_tmp)); 
        end if;

end if;
end process;

end rtl;

