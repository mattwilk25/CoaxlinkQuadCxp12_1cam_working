// ==============================================================
// RTL generated by Vitis HLS - High-Level Synthesis from C, C++ and OpenCL v2022.2 (64-bit)
// Version: 2022.2
// Copyright (C) Copyright 1986-2022 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module myproject_relu_array_ap_fixed_6u_array_ap_ufixed_8_2_4_0_0_6u_relu_config4_s (
        ap_clk,
        ap_rst,
        ap_start,
        start_full_n,
        ap_done,
        ap_continue,
        ap_idle,
        ap_ready,
        layer2_out_dout,
        layer2_out_num_data_valid,
        layer2_out_fifo_cap,
        layer2_out_empty_n,
        layer2_out_read,
        layer4_out_din,
        layer4_out_num_data_valid,
        layer4_out_fifo_cap,
        layer4_out_full_n,
        layer4_out_write,
        start_out,
        start_write
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
input   start_full_n;
output   ap_done;
input   ap_continue;
output   ap_idle;
output   ap_ready;
input  [47:0] layer2_out_dout;
input  [11:0] layer2_out_num_data_valid;
input  [11:0] layer2_out_fifo_cap;
input   layer2_out_empty_n;
output   layer2_out_read;
output  [47:0] layer4_out_din;
input  [11:0] layer4_out_num_data_valid;
input  [11:0] layer4_out_fifo_cap;
input   layer4_out_full_n;
output   layer4_out_write;
output   start_out;
output   start_write;

reg ap_idle;
reg layer2_out_read;
reg layer4_out_write;
reg start_write;

reg    real_start;
reg    start_once_reg;
(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_idle_pp0;
wire    internal_ap_ready;
reg    ap_done_reg;
reg    ap_block_state1_pp0_stage0_iter0;
reg    ap_block_state2_pp0_stage0_iter1;
reg    ap_block_state3_pp0_stage0_iter2;
reg    ap_block_pp0_stage0_subdone;
wire   [0:0] icmp_ln41_fu_101_p2;
reg    ap_condition_exit_pp0_iter0_stage0;
wire    ap_loop_exit_ready;
reg    ap_ready_int;
reg    layer2_out_blk_n;
wire    ap_block_pp0_stage0;
reg    layer4_out_blk_n;
reg    ap_block_pp0_stage0_11001;
wire   [6:0] out_data_data_fu_232_p3;
reg   [6:0] out_data_data_reg_356;
wire   [6:0] out_data_data_15_fu_246_p3;
reg   [6:0] out_data_data_15_reg_361;
wire   [6:0] out_data_data_16_fu_260_p3;
reg   [6:0] out_data_data_16_reg_366;
wire   [6:0] out_data_data_18_fu_274_p3;
reg   [6:0] out_data_data_18_reg_371;
wire   [6:0] out_data_data_19_fu_288_p3;
reg   [6:0] out_data_data_19_reg_376;
wire   [6:0] out_data_data_21_fu_302_p3;
reg   [6:0] out_data_data_21_reg_381;
reg   [10:0] i_fu_76;
wire   [10:0] i_2_fu_107_p2;
wire    ap_loop_init;
reg   [10:0] ap_sig_allocacmp_i_1;
reg    ap_block_pp0_stage0_01001;
wire   [7:0] out_data_data_22_fu_118_p1;
wire   [0:0] icmp_ln1649_fu_226_p2;
wire   [6:0] trunc_ln45_fu_122_p1;
wire   [7:0] in_data_data_fu_146_p4;
wire   [0:0] icmp_ln1649_98_fu_240_p2;
wire   [6:0] trunc_ln44_s_fu_156_p4;
wire   [7:0] out_data_data_23_fu_166_p4;
wire   [0:0] icmp_ln1649_99_fu_254_p2;
wire   [6:0] trunc_ln45_4_fu_176_p4;
wire   [7:0] in_data_data_15_fu_186_p4;
wire   [0:0] icmp_ln1649_100_fu_268_p2;
wire   [6:0] trunc_ln44_48_fu_196_p4;
wire   [7:0] out_data_data_24_fu_126_p4;
wire   [0:0] icmp_ln1649_101_fu_282_p2;
wire   [6:0] trunc_ln45_5_fu_206_p4;
wire   [7:0] in_data_data_16_fu_136_p4;
wire   [0:0] icmp_ln1649_102_fu_296_p2;
wire   [6:0] trunc_ln44_49_fu_216_p4;
wire   [7:0] zext_ln45_2_fu_322_p1;
wire   [7:0] zext_ln51_48_fu_319_p1;
wire   [7:0] zext_ln45_1_fu_316_p1;
wire   [7:0] zext_ln51_fu_313_p1;
wire   [7:0] zext_ln45_fu_310_p1;
wire   [46:0] or_ln57_s_fu_325_p7;
wire    ap_continue_int;
reg    ap_done_int;
reg    ap_loop_exit_ready_pp0_iter1_reg;
reg   [0:0] ap_NS_fsm;
wire    ap_enable_pp0;
wire    ap_start_int;
reg    ap_condition_122;
wire    ap_ce_reg;

// power-on initialization
initial begin
#0 start_once_reg = 1'b0;
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_done_reg = 1'b0;
end

myproject_flow_control_loop_pipe flow_control_loop_pipe_U(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(real_start),
    .ap_ready(internal_ap_ready),
    .ap_done(ap_done),
    .ap_start_int(ap_start_int),
    .ap_loop_init(ap_loop_init),
    .ap_ready_int(ap_ready_int),
    .ap_loop_exit_ready(ap_condition_exit_pp0_iter0_stage0),
    .ap_loop_exit_done(ap_done_int),
    .ap_continue_int(ap_continue_int),
    .ap_done_int(ap_done_int),
    .ap_continue(ap_continue)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_done_reg <= 1'b0;
    end else begin
        if ((ap_continue_int == 1'b1)) begin
            ap_done_reg <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_done_reg <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((1'b1 == ap_condition_exit_pp0_iter0_stage0)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start_int;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        start_once_reg <= 1'b0;
    end else begin
        if (((real_start == 1'b1) & (internal_ap_ready == 1'b0))) begin
            start_once_reg <= 1'b1;
        end else if ((internal_ap_ready == 1'b1)) begin
            start_once_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_condition_122)) begin
        if ((icmp_ln41_fu_101_p2 == 1'd0)) begin
            i_fu_76 <= i_2_fu_107_p2;
        end else if ((ap_loop_init == 1'b1)) begin
            i_fu_76 <= 11'd0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_loop_exit_ready_pp0_iter1_reg <= ap_loop_exit_ready;
        out_data_data_15_reg_361 <= out_data_data_15_fu_246_p3;
        out_data_data_16_reg_366 <= out_data_data_16_fu_260_p3;
        out_data_data_18_reg_371 <= out_data_data_18_fu_274_p3;
        out_data_data_19_reg_376 <= out_data_data_19_fu_288_p3;
        out_data_data_21_reg_381 <= out_data_data_21_fu_302_p3;
        out_data_data_reg_356 <= out_data_data_fu_232_p3;
    end
end

always @ (*) begin
    if (((icmp_ln41_fu_101_p2 == 1'd1) & (1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b1;
    end else begin
        ap_condition_exit_pp0_iter0_stage0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_loop_exit_ready_pp0_iter1_reg == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_done_int = 1'b1;
    end else begin
        ap_done_int = ap_done_reg;
    end
end

always @ (*) begin
    if (((ap_idle_pp0 == 1'b1) & (ap_start_int == 1'b0) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_subdone) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready_int = 1'b1;
    end else begin
        ap_ready_int = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (ap_loop_init == 1'b1))) begin
        ap_sig_allocacmp_i_1 = 11'd0;
    end else begin
        ap_sig_allocacmp_i_1 = i_fu_76;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer2_out_blk_n = layer2_out_empty_n;
    end else begin
        layer2_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        layer2_out_read = 1'b1;
    end else begin
        layer2_out_read = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        layer4_out_blk_n = layer4_out_full_n;
    end else begin
        layer4_out_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter2 == 1'b1))) begin
        layer4_out_write = 1'b1;
    end else begin
        layer4_out_write = 1'b0;
    end
end

always @ (*) begin
    if (((start_full_n == 1'b0) & (start_once_reg == 1'b0))) begin
        real_start = 1'b0;
    end else begin
        real_start = ap_start;
    end
end

always @ (*) begin
    if (((real_start == 1'b1) & (start_once_reg == 1'b0))) begin
        start_write = 1'b1;
    end else begin
        start_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_01001 = ((ap_done_reg == 1'b1) | ((layer4_out_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((layer2_out_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_done_reg == 1'b1) | ((layer4_out_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((layer2_out_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_done_reg == 1'b1) | ((layer4_out_full_n == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b1)) | ((layer2_out_empty_n == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b1)) | ((ap_done_reg == 1'b1) & (ap_start_int == 1'b1)));
end

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_done_reg == 1'b1);
end

always @ (*) begin
    ap_block_state2_pp0_stage0_iter1 = (layer2_out_empty_n == 1'b0);
end

always @ (*) begin
    ap_block_state3_pp0_stage0_iter2 = (layer4_out_full_n == 1'b0);
end

always @ (*) begin
    ap_condition_122 = ((1'b0 == ap_block_pp0_stage0_11001) & (ap_start_int == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0));
end

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start_int;

assign ap_loop_exit_ready = ap_condition_exit_pp0_iter0_stage0;

assign ap_ready = internal_ap_ready;

assign i_2_fu_107_p2 = (ap_sig_allocacmp_i_1 + 11'd1);

assign icmp_ln1649_100_fu_268_p2 = (($signed(in_data_data_15_fu_186_p4) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1649_101_fu_282_p2 = (($signed(out_data_data_24_fu_126_p4) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1649_102_fu_296_p2 = (($signed(in_data_data_16_fu_136_p4) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1649_98_fu_240_p2 = (($signed(in_data_data_fu_146_p4) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1649_99_fu_254_p2 = (($signed(out_data_data_23_fu_166_p4) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign icmp_ln1649_fu_226_p2 = (($signed(out_data_data_22_fu_118_p1) > $signed(8'd0)) ? 1'b1 : 1'b0);

assign icmp_ln41_fu_101_p2 = ((ap_sig_allocacmp_i_1 == 11'd1936) ? 1'b1 : 1'b0);

assign in_data_data_15_fu_186_p4 = {{layer2_out_dout[31:24]}};

assign in_data_data_16_fu_136_p4 = {{layer2_out_dout[47:40]}};

assign in_data_data_fu_146_p4 = {{layer2_out_dout[15:8]}};

assign layer4_out_din = or_ln57_s_fu_325_p7;

assign or_ln57_s_fu_325_p7 = {{{{{{out_data_data_21_reg_381}, {zext_ln45_2_fu_322_p1}}, {zext_ln51_48_fu_319_p1}}, {zext_ln45_1_fu_316_p1}}, {zext_ln51_fu_313_p1}}, {zext_ln45_fu_310_p1}};

assign out_data_data_15_fu_246_p3 = ((icmp_ln1649_98_fu_240_p2[0:0] == 1'b1) ? trunc_ln44_s_fu_156_p4 : 7'd0);

assign out_data_data_16_fu_260_p3 = ((icmp_ln1649_99_fu_254_p2[0:0] == 1'b1) ? trunc_ln45_4_fu_176_p4 : 7'd0);

assign out_data_data_18_fu_274_p3 = ((icmp_ln1649_100_fu_268_p2[0:0] == 1'b1) ? trunc_ln44_48_fu_196_p4 : 7'd0);

assign out_data_data_19_fu_288_p3 = ((icmp_ln1649_101_fu_282_p2[0:0] == 1'b1) ? trunc_ln45_5_fu_206_p4 : 7'd0);

assign out_data_data_21_fu_302_p3 = ((icmp_ln1649_102_fu_296_p2[0:0] == 1'b1) ? trunc_ln44_49_fu_216_p4 : 7'd0);

assign out_data_data_22_fu_118_p1 = layer2_out_dout[7:0];

assign out_data_data_23_fu_166_p4 = {{layer2_out_dout[23:16]}};

assign out_data_data_24_fu_126_p4 = {{layer2_out_dout[39:32]}};

assign out_data_data_fu_232_p3 = ((icmp_ln1649_fu_226_p2[0:0] == 1'b1) ? trunc_ln45_fu_122_p1 : 7'd0);

assign start_out = real_start;

assign trunc_ln44_48_fu_196_p4 = {{layer2_out_dout[30:24]}};

assign trunc_ln44_49_fu_216_p4 = {{layer2_out_dout[46:40]}};

assign trunc_ln44_s_fu_156_p4 = {{layer2_out_dout[14:8]}};

assign trunc_ln45_4_fu_176_p4 = {{layer2_out_dout[22:16]}};

assign trunc_ln45_5_fu_206_p4 = {{layer2_out_dout[38:32]}};

assign trunc_ln45_fu_122_p1 = layer2_out_dout[6:0];

assign zext_ln45_1_fu_316_p1 = out_data_data_16_reg_366;

assign zext_ln45_2_fu_322_p1 = out_data_data_19_reg_376;

assign zext_ln45_fu_310_p1 = out_data_data_reg_356;

assign zext_ln51_48_fu_319_p1 = out_data_data_18_reg_371;

assign zext_ln51_fu_313_p1 = out_data_data_15_reg_361;

endmodule //myproject_relu_array_ap_fixed_6u_array_ap_ufixed_8_2_4_0_0_6u_relu_config4_s
